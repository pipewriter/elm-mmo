var _user$project$Main$playerForm = function (player) {
	return A2(
		_evancz$elm_graphics$Collage$move,
		{ctor: '_Tuple2', _0: 0 - (500 - player.x), _1: 500 - player.y},
		_evancz$elm_graphics$Collage$group(
			{
				ctor: '::',
				_0: A2(
					_evancz$elm_graphics$Collage$filled,
					_elm_lang$core$Color$red,
					A2(
						_evancz$elm_graphics$Collage$rect,
						_elm_lang$core$Basics$toFloat(20),
						_elm_lang$core$Basics$toFloat(20))),
				_1: {
					ctor: '::',
					_0: A2(
						_evancz$elm_graphics$Collage$move,
						{ctor: '_Tuple2', _0: 0.0, _1: 20.0},
						_evancz$elm_graphics$Collage$toForm(
							_evancz$elm_graphics$Element$centered(
								_evancz$elm_graphics$Text$fromString(player.name)))),
					_1: {ctor: '[]'}
				}
			}));
};
var _user$project$Main$background = A2(
	_evancz$elm_graphics$Collage$filled,
	_elm_lang$core$Color$blue,
	A2(
		_evancz$elm_graphics$Collage$rect,
		_elm_lang$core$Basics$toFloat(1000),
		_elm_lang$core$Basics$toFloat(1000)));
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('main'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _evancz$elm_graphics$Element$toHtml(
				A3(
					_evancz$elm_graphics$Collage$collage,
					1000,
					1000,
					{
						ctor: '::',
						_0: _user$project$Main$background,
						_1: A2(_elm_lang$core$List$map, _user$project$Main$playerForm, model.players)
					})),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('instructions'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Use A and D to move, Space to jump'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$computeDirection = F2(
	function (mousePosition, player) {
		var disy = _elm_lang$core$Basics$toFloat(mousePosition.y) - player.y;
		var disx = _elm_lang$core$Basics$toFloat(mousePosition.x) - player.x;
		var mag = _elm_lang$core$Basics$sqrt(
			Math.pow(disx, 2) + Math.pow(disy, 2));
		var uvy = disy / mag;
		var uvx = disx / mag;
		return {ctor: '_Tuple2', _0: uvx, _1: uvy};
	});
var _user$project$Main$getPlayer = function (model) {
	return A2(
		_elm_community$list_extra$List_Extra$find,
		function (player) {
			return _elm_lang$core$Native_Utils.eq(player.id, model.playerId);
		},
		model.players);
};
var _user$project$Main$url = 'ws://localhost:8080';
var _user$project$Main$sendName = function (string) {
	return A2(
		_elm_lang$websocket$WebSocket$send,
		_user$project$Main$url,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'{\"name\":\"',
			A2(_elm_lang$core$Basics_ops['++'], string, '\"}')));
};
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: {
		players: {ctor: '[]'},
		playerId: 0
	},
	_1: _user$project$Main$sendName('fred')
};
var _user$project$Main$sendDirection = function (_p0) {
	var _p1 = _p0;
	return A2(
		_elm_lang$websocket$WebSocket$send,
		_user$project$Main$url,
		A2(
			_elm_lang$core$Json_Encode$encode,
			0,
			_elm_lang$core$Json_Encode$object(
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'uvx',
						_1: _elm_lang$core$Json_Encode$float(_p1._0)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'uvy',
							_1: _elm_lang$core$Json_Encode$float(_p1._1)
						},
						_1: {ctor: '[]'}
					}
				})));
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'RecieveMessage':
				return {ctor: '_Tuple2', _0: _p2._0, _1: _elm_lang$core$Platform_Cmd$none};
			case 'MouseMoved':
				var cmd = A2(
					_elm_lang$core$Maybe$withDefault,
					_elm_lang$core$Platform_Cmd$none,
					A2(
						_elm_lang$core$Maybe$map,
						_user$project$Main$sendDirection,
						A2(
							_elm_lang$core$Maybe$map,
							_user$project$Main$computeDirection(_p2._0),
							_user$project$Main$getPlayer(model))));
				return {ctor: '_Tuple2', _0: model, _1: cmd};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Main$Player = F4(
	function (a, b, c, d) {
		return {x: a, y: b, name: c, id: d};
	});
var _user$project$Main$playerDecoder = A5(
	_elm_lang$core$Json_Decode$map4,
	_user$project$Main$Player,
	A2(_elm_lang$core$Json_Decode$field, 'x', _elm_lang$core$Json_Decode$float),
	A2(_elm_lang$core$Json_Decode$field, 'y', _elm_lang$core$Json_Decode$float),
	A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int));
var _user$project$Main$Model = F2(
	function (a, b) {
		return {players: a, playerId: b};
	});
var _user$project$Main$modelDecoder = A3(
	_elm_lang$core$Json_Decode$map2,
	_user$project$Main$Model,
	A2(
		_elm_lang$core$Json_Decode$field,
		'players',
		_elm_lang$core$Json_Decode$list(_user$project$Main$playerDecoder)),
	A2(_elm_lang$core$Json_Decode$field, 'playerId', _elm_lang$core$Json_Decode$int));
var _user$project$Main$NoOp = {ctor: 'NoOp'};
var _user$project$Main$MouseMoved = function (a) {
	return {ctor: 'MouseMoved', _0: a};
};
var _user$project$Main$RecieveMessage = function (a) {
	return {ctor: 'RecieveMessage', _0: a};
};
var _user$project$Main$parseMessage = function (string) {
	return A2(
		_elm_lang$core$Result$withDefault,
		_user$project$Main$NoOp,
		A2(
			_elm_lang$core$Result$map,
			_user$project$Main$RecieveMessage,
			A2(_elm_lang$core$Json_Decode$decodeString, _user$project$Main$modelDecoder, string)));
};
var _user$project$Main$subs = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: A2(_elm_lang$websocket$WebSocket$listen, _user$project$Main$url, _user$project$Main$parseMessage),
			_1: {
				ctor: '::',
				_0: _elm_lang$mouse$Mouse$moves(_user$project$Main$MouseMoved),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, update: _user$project$Main$update, view: _user$project$Main$view, subscriptions: _user$project$Main$subs})();
